[{"flag": "-faggressive-loop-optimizations", "explanation": "Aggressively optimize loops using languageconstraints.", "id": 0}, {"flag": "-falign-functions", "explanation": "Align the start of functions.", "id": 1}, {"flag": "-falign-jumps", "explanation": "Align labels which are only reached by jumping.", "id": 2}, {"flag": "-falign-labels", "explanation": "Align all labels.", "id": 3}, {"flag": "-falign-loops", "explanation": "Align the start of loops.", "id": 4}, {"flag": "-fassociative-math", "explanation": "Allow optimization for floating-point arithmeticwhich may change the result of the operation dueto rounding.", "id": 5}, {"flag": "-fasynchronous-unwind-tables", "explanation": "Generate unwind tables that are exact at eachinstruction boundary.", "id": 6}, {"flag": "-fauto-inc-dec", "explanation": "Generate auto-inc/dec instructions.", "id": 7}, {"flag": "-fbranch-count-reg", "explanation": "Replace add, compare, branch with branch on countregister.", "id": 8}, {"flag": "-fbranch-probabilities", "explanation": "Use profiling information for branchprobabilities.", "id": 9}, {"flag": "-fbranch-target-load-optimize", "explanation": "Perform branch target load optimization beforeprologue / epilogue threading.", "id": 10}, {"flag": "-fbranch-target-load-optimize2", "explanation": "Perform branch target load optimization afterprologue / epilogue threading.", "id": 11}, {"flag": "-fbtr-bb-exclusive", "explanation": "Restrict target load migration not to re-useregisters in any basic block.", "id": 12}, {"flag": "-fcaller-saves", "explanation": "Save registers around function calls.", "id": 13}, {"flag": "-fcombine-stack-adjustments", "explanation": "Looks for opportunities to reduce stackadjustments and stack references.", "id": 14}, {"flag": "-fcompare-elim", "explanation": "Perform comparison elimination after registerallocation has finished.", "id": 15}, {"flag": "-fconserve-stack", "explanation": "Do not perform optimizations increasingnoticeably stack usage.", "id": 16}, {"flag": "-fcprop-registers", "explanation": "Perform a register copy-propagation optimizationpass.", "id": 17}, {"flag": "-fcrossjumping", "explanation": "Perform cross-jumping optimization.", "id": 18}, {"flag": "-fcse-follow-jumps", "explanation": "When running CSE, follow jumps to their targets.", "id": 19}, {"flag": "-fcx-fortran-rules", "explanation": "Complex multiplication and division followFortran rules.", "id": 20}, {"flag": "-fcx-limited-range", "explanation": "Omit range reduction step when performing complexdivision.", "id": 21}, {"flag": "-fdce", "explanation": "Use the RTL dead code elimination pass.", "id": 22}, {"flag": "-fdefer-pop", "explanation": "Defer popping functions args from stack untillater.", "id": 23}, {"flag": "-fdelayed-branch", "explanation": "Attempt to fill delay slots of branchinstructions.", "id": 24}, {"flag": "-fdelete-dead-exceptions", "explanation": "Delete dead instructions that may throwexceptions.", "id": 25}, {"flag": "-fdelete-null-pointer-checks", "explanation": "Delete useless null pointer checks.", "id": 26}, {"flag": "-fdevirtualize", "explanation": "Try to convert virtual calls to direct ones.", "id": 27}, {"flag": "-fdevirtualize-speculatively", "explanation": "Perform speculative devirtualization.", "id": 28}, {"flag": "-fdse", "explanation": "Use the RTL dead store elimination pass.", "id": 29}, {"flag": "-fearly-inlining", "explanation": "Perform early inlining.", "id": 30}, {"flag": "-fexceptions", "explanation": "Enable exception handling.", "id": 31}, {"flag": "-fexpensive-optimizations", "explanation": "Perform a number of minor, expensiveoptimizations.", "id": 32}, {"flag": "-ffinite-math-only", "explanation": "Assume no NaNs or infinities are generated.", "id": 33}, {"flag": "-ffloat-store", "explanation": "Don't allocate floats and doubles in extended-precision registers.", "id": 34}, {"flag": "-fforward-propagate", "explanation": "Perform a forward propagation pass on RTL.", "id": 35}, {"flag": "-ffp-contract=off", "explanation": "-ffp-contract=[off|on|fast] Perform floating-point expression contraction.", "id": 36}, {"flag": "-ffp-contract=fast", "explanation": "-ffp-contract=[off|on|fast] Perform floating-point expression contraction.", "id": 37}, {"flag": "-ffp-contract=on", "explanation": "-ffp-contract=[off|on|fast] Perform floating-point expression contraction.", "id": 38}, {"flag": "-ffunction-cse", "explanation": "Allow function addresses to be held in registers.", "id": 39}, {"flag": "-fgcse", "explanation": "Perform global common subexpression elimination.", "id": 40}, {"flag": "-fgcse-after-reload", "explanation": "Perform global common subexpression eliminationafter register allocation has finished.", "id": 41}, {"flag": "-fgcse-las", "explanation": "Perform redundant load after store elimination inglobal common subexpression elimination.", "id": 42}, {"flag": "-fgcse-lm", "explanation": "Perform enhanced load motion during global commonsubexpression elimination.", "id": 43}, {"flag": "-fgcse-sm", "explanation": "Perform store motion after global commonsubexpression elimination.", "id": 44}, {"flag": "-fgraphite", "explanation": "Enable in and out of Graphite representation.", "id": 45}, {"flag": "-fgraphite-identity", "explanation": "Enable Graphite Identity transformation.", "id": 46}, {"flag": "-fguess-branch-probability", "explanation": "Enable guessing of branch probabilities.", "id": 47}, {"flag": "-fhandle-exceptions", "explanation": "\u4e0e -fexceptions\u76f8\u540c\u3002\u8bf7\u7528\u540e\u8005\u66ff\u4ee3\u3002\u5bf9\u6b64\u9009\u9879\u7684\u4f7f\u7528\u5c06\u88ab\u8bca\u65ad\u3002", "id": 48}, {"flag": "-fhoist-adjacent-loads", "explanation": "Enable hoisting adjacent loads to encouragegenerating conditional move instructions.", "id": 49}, {"flag": "-fif-conversion", "explanation": "Perform conversion of conditional jumps tobranchless equivalents.", "id": 50}, {"flag": "-fif-conversion2", "explanation": "Perform conversion of conditional jumps toconditional execution.", "id": 51}, {"flag": "-findirect-inlining", "explanation": "Perform indirect inlining.", "id": 52}, {"flag": "-finline", "explanation": "Enable inlining of function declared \"inline\",disabling disables all inlining.", "id": 53}, {"flag": "-finline-atomics", "explanation": "Inline __atomic operations when a lock freeinstruction sequence is available.", "id": 54}, {"flag": "-finline-functions", "explanation": "Integrate functions not declared \"inline\" intotheir callers when profitable.", "id": 55}, {"flag": "-finline-functions-called-once", "explanation": "Integrate functions only required by theirsingle caller.", "id": 56}, {"flag": "-finline-small-functions", "explanation": "Integrate functions into their callers when codesize is known not to grow.", "id": 57}, {"flag": "-fipa-cp", "explanation": "Perform interprocedural constant propagation.", "id": 58}, {"flag": "-fipa-cp-alignment", "explanation": "Perform alignment discovery and propagation tomake Interprocedural constant propagationstronger.", "id": 59}, {"flag": "-fipa-cp-clone", "explanation": "Perform cloning to make Interprocedural constantpropagation stronger.", "id": 60}, {"flag": "-fipa-icf", "explanation": "Perform Identical Code Folding for functions andread-only variables.", "id": 61}, {"flag": "-fipa-icf-functions", "explanation": "Perform Identical Code Folding for functions.", "id": 62}, {"flag": "-fipa-profile", "explanation": "Perform interprocedural profile propagation.", "id": 63}, {"flag": "-fipa-pta", "explanation": "Perform interprocedural points-to analysis.", "id": 64}, {"flag": "-fipa-pure-const", "explanation": "Discover pure and const functions.", "id": 65}, {"flag": "-fipa-ra", "explanation": "Use caller save register across calls if possible.", "id": 66}, {"flag": "-fipa-reference", "explanation": "Discover readonly and non addressable staticvariables.", "id": 67}, {"flag": "-fipa-sra", "explanation": "Perform interprocedural reduction of aggregates.", "id": 68}, {"flag": "-fira-algorithm=CB", "explanation": "-fira-algorithm=[CB|priority] Set the used IRAalgorithm.", "id": 69}, {"flag": "-fira-algorithm=priority", "explanation": "-fira-algorithm=[CB|priority] Set the used IRAalgorithm.", "id": 70}, {"flag": "-fira-hoist-pressure", "explanation": "Use IRA based register pressure calculation inRTL hoist optimizations.", "id": 71}, {"flag": "-fira-loop-pressure", "explanation": "Use IRA based register pressure calculation inRTL loop optimizations.", "id": 72}, {"flag": "-fira-region=one", "explanation": "-fira-region=[one|all|mixed] Set regions for IRA.", "id": 73}, {"flag": "-fira-region=all", "explanation": "-fira-region=[one|all|mixed] Set regions for IRA.", "id": 74}, {"flag": "-fira-region=mixed", "explanation": "-fira-region=[one|all|mixed] Set regions for IRA.", "id": 75}, {"flag": "-fira-share-save-slots", "explanation": "\u4e3a\u4fdd\u5b58\u4e0d\u540c\u7684\u786c\u5bc4\u5b58\u5668\u7684\u5171\u4eab\u69fd\u3002", "id": 76}, {"flag": "-fira-share-spill-slots", "explanation": "\u4e3a\u6ea2\u51fa\u7684\u4f2a\u5bc4\u5b58\u5668\u5171\u4eab\u5806\u6808\u69fd\u3002", "id": 77}, {"flag": "-fisolate-erroneous-paths-attribute", "explanation": "Detect paths that trigger erroneous orundefined behavior due a null value being used ina way forbidden by a returns_nonnull or nonnullattribute.  Isolate those paths from the maincontrol flow and turn the statement witherroneous or undefined behavior into a trap.", "id": 78}, {"flag": "-fisolate-erroneous-paths-dereference", "explanation": "Detect paths that trigger erroneous orundefined behavior due to dereferencing a nullpointer.  Isolate those paths from the maincontrol flow and turn the statement witherroneous or undefined behavior into a trap.", "id": 79}, {"flag": "-fivopts", "explanation": "Optimize induction variables on trees.", "id": 80}, {"flag": "-fjump-tables", "explanation": "Use jump tables for sufficiently large switchstatements.", "id": 81}, {"flag": "-fkeep-gc-roots-live", "explanation": "\u6b64\u5f00\u5173\u7f3a\u5c11\u6587\u6863\u3002", "id": 82}, {"flag": "-flifetime-dse", "explanation": "Tell DSE that the storage for a C++ object isdead when the constructor starts and when thedestructor finishes.", "id": 83}, {"flag": "-flifetime-dse=0", "explanation": "\u6b64\u5f00\u5173\u7f3a\u5c11\u6587\u6863\u3002", "id": 84}, {"flag": "-flifetime-dse=1", "explanation": "\u6b64\u5f00\u5173\u7f3a\u5c11\u6587\u6863\u3002", "id": 85}, {"flag": "-flifetime-dse=2", "explanation": "\u6b64\u5f00\u5173\u7f3a\u5c11\u6587\u6863\u3002", "id": 86}, {"flag": "-flive-range-shrinkage", "explanation": "Relief of register pressure through live rangeshrinkage.", "id": 87}, {"flag": "-floop-nest-optimize", "explanation": "Enable the loop nest optimizer.", "id": 88}, {"flag": "-floop-parallelize-all", "explanation": "Mark all loops as parallel.", "id": 89}, {"flag": "-flra-remat", "explanation": "Do CFG-sensitive rematerialization in LRA.", "id": 90}, {"flag": "-fmath-errno", "explanation": "Set errno after built-in math functions.", "id": 91}, {"flag": "-fmodulo-sched", "explanation": "Perform SMS based modulo scheduling before thefirst scheduling pass.", "id": 92}, {"flag": "-fmodulo-sched-allow-regmoves", "explanation": "Perform SMS based modulo scheduling withregister moves allowed.", "id": 93}, {"flag": "-fmove-loop-invariants", "explanation": "Move loop invariant computations out of loops.", "id": 94}, {"flag": "-fnon-call-exceptions", "explanation": "Support synchronous non-call exceptions.", "id": 95}, {"flag": "-fnothrow-opt", "explanation": "Treat a throw() exception specification asnoexcept to improve code size.", "id": 96}, {"flag": "-fomit-frame-pointer", "explanation": "When possible do not generate stack frames.", "id": 97}, {"flag": "-fopt-info", "explanation": "Enable all optimization info dumps on stderr.", "id": 98}, {"flag": "-foptimize-sibling-calls", "explanation": "Optimize sibling and tail recursive calls.", "id": 99}, {"flag": "-foptimize-strlen", "explanation": "Enable string length optimizations on trees.", "id": 100}, {"flag": "-fpack-struct", "explanation": "Pack structure members together without holes.", "id": 101}, {"flag": "-fpartial-inlining", "explanation": "Perform partial inlining.", "id": 102}, {"flag": "-fpeel-loops", "explanation": "Perform loop peeling.", "id": 103}, {"flag": "-fpeephole", "explanation": "Enable machine specific peephole optimizations.", "id": 104}, {"flag": "-fpeephole2", "explanation": "Enable an RTL peephole pass before sched2.", "id": 105}, {"flag": "-fplt", "explanation": "Use PLT for PIC calls (-fno-plt: load the addressfrom GOT at call site).", "id": 106}, {"flag": "-fpredictive-commoning", "explanation": "\u542f\u7528\u9884\u6d4b\u516c\u56e0\u5b50\u4f18\u5316\u3002", "id": 107}, {"flag": "-fprefetch-loop-arrays", "explanation": "Generate prefetch instructions, if available, forarrays in loops.", "id": 108}, {"flag": "-freciprocal-math", "explanation": "\u4e0e -fassociative-math\u76f8\u540c\uff0c\u4f5c\u7528\u4e8e\u5305\u542b\u9664\u6cd5\u7684\u8868\u8fbe\u5f0f\u3002", "id": 109}, {"flag": "-freg-struct-return", "explanation": "Return small aggregates in registers.", "id": 110}, {"flag": "-frename-registers", "explanation": "Perform a register renaming optimization pass.", "id": 111}, {"flag": "-freorder-blocks", "explanation": "Reorder basic blocks to improve code placement.", "id": 112}, {"flag": "-freorder-blocks-algorithm=simple", "explanation": "-freorder-blocks-algorithm=[simple|stc] Set theused basic block reordering algorithm.", "id": 113}, {"flag": "-freorder-blocks-algorithm=stc", "explanation": "-freorder-blocks-algorithm=[simple|stc] Set theused basic block reordering algorithm.", "id": 114}, {"flag": "-freorder-blocks-and-partition", "explanation": "Reorder basic blocks and partition into hotand cold sections.", "id": 115}, {"flag": "-freorder-functions", "explanation": "Reorder functions to improve code placement.", "id": 116}, {"flag": "-frerun-cse-after-loop", "explanation": "Add a common subexpression elimination pass afterloop optimizations.", "id": 117}, {"flag": "-freschedule-modulo-scheduled-loops", "explanation": "Enable/Disable the traditional schedulingin loops that already passed modulo scheduling.", "id": 118}, {"flag": "-frounding-math", "explanation": "Disable optimizations that assume default FProunding behavior.", "id": 119}, {"flag": "-frtti", "explanation": "Generate run time type descriptor information.", "id": 120}, {"flag": "-fsched-critical-path-heuristic", "explanation": "Enable the critical path heuristic in thescheduler.", "id": 121}, {"flag": "-fsched-dep-count-heuristic", "explanation": "Enable the dependent count heuristic in thescheduler.", "id": 122}, {"flag": "-fsched-group-heuristic", "explanation": "Enable the group heuristic in the scheduler.", "id": 123}, {"flag": "-fsched-interblock", "explanation": "Enable scheduling across basic blocks.", "id": 124}, {"flag": "-fsched-last-insn-heuristic", "explanation": "Enable the last instruction heuristic in thescheduler.", "id": 125}, {"flag": "-fsched-pressure", "explanation": "Enable register pressure sensitive insnscheduling.", "id": 126}, {"flag": "-fsched-rank-heuristic", "explanation": "Enable the rank heuristic in the scheduler.", "id": 127}, {"flag": "-fsched-spec", "explanation": "Allow speculative motion of non-loads.", "id": 128}, {"flag": "-fsched-spec-insn-heuristic", "explanation": "Enable the speculative instruction heuristic inthe scheduler.", "id": 129}, {"flag": "-fsched-spec-load", "explanation": "Allow speculative motion of some loads.", "id": 130}, {"flag": "-fsched-spec-load-dangerous", "explanation": "Allow speculative motion of more loads.", "id": 131}, {"flag": "-fsched-stalled-insns", "explanation": "Allow premature scheduling of queued insns.", "id": 132}, {"flag": "-fsched-stalled-insns-dep", "explanation": "Set dependence distance checking in prematurescheduling of queued insns.premature scheduling of queued insns.prematurely scheduled.", "id": 133}, {"flag": "-fsched2-use-superblocks", "explanation": "If scheduling post reload, do superblockscheduling.", "id": 134}, {"flag": "-fschedule-fusion", "explanation": "Perform a target dependent instruction fusionoptimization pass.", "id": 135}, {"flag": "-fschedule-insns", "explanation": "Reschedule instructions before registerallocation.", "id": 136}, {"flag": "-fschedule-insns2", "explanation": "Reschedule instructions after register allocation.", "id": 137}, {"flag": "-fsection-anchors", "explanation": "Access data in the same section from sharedanchor points.", "id": 138}, {"flag": "-fsel-sched-pipelining", "explanation": "Perform software pipelining of inner loops duringselective scheduling.", "id": 139}, {"flag": "-fsel-sched-pipelining-outer-loops", "explanation": "Perform software pipelining of outer loopsduring selective scheduling.", "id": 140}, {"flag": "-fsel-sched-reschedule-pipelined", "explanation": "Reschedule pipelined regions withoutpipelining.", "id": 141}, {"flag": "-fselective-scheduling", "explanation": "Schedule instructions using selective schedulingalgorithm.", "id": 142}, {"flag": "-fselective-scheduling2", "explanation": "Run selective scheduling after reload.", "id": 143}, {"flag": "-fset-stack-executable", "explanation": "\u4e3a\u5d4c\u5957\u51fd\u6570\u8bbe\u5b9a\u53ef\u6267\u884c\u5806\u6808\u6743\u9650\u3002", "id": 144}, {"flag": "-fshort-enums", "explanation": "Use the narrowest integer type possible forenumeration types.", "id": 145}, {"flag": "-fshort-wchar", "explanation": "Force the underlying type for \"wchar_t\" to be\"unsigned short\".", "id": 146}, {"flag": "-fshrink-wrap", "explanation": "Emit function prologues only before parts of thefunction that need it, rather than at the top ofthe function.", "id": 147}, {"flag": "-fsignaling-nans", "explanation": "Disable optimizations observable by IEEEsignaling NaNs.", "id": 148}, {"flag": "-fsigned-zeros", "explanation": "Disable floating point optimizations that ignorethe IEEE signedness of zero.", "id": 149}, {"flag": "-fsimd-cost-model=dynamic", "explanation": "Specifies the vectorization cost model for codemarked with a simd directive.", "id": 150}, {"flag": "-fsimd-cost-model=cheap", "explanation": "Specifies the vectorization cost model for codemarked with a simd directive.", "id": 151}, {"flag": "-fsimd-cost-model=unlimited", "explanation": "Specifies the vectorization cost model for codemarked with a simd directive.", "id": 152}, {"flag": "-fsingle-precision-constant", "explanation": "Convert floating point constants to singleprecision constants.", "id": 153}, {"flag": "-fsplit-ivs-in-unroller", "explanation": "Split lifetimes of induction variables when loopsare unrolled.", "id": 154}, {"flag": "-fsplit-paths", "explanation": "Split paths leading to loop backedges.", "id": 155}, {"flag": "-fsplit-wide-types", "explanation": "Split wide types into independent registers.", "id": 156}, {"flag": "-fssa-backprop", "explanation": "Enable backward propagation of use properties atthe SSA level.", "id": 157}, {"flag": "-fssa-phiopt", "explanation": "Optimize conditional patterns using SSA PHI nodes.", "id": 158}, {"flag": "-fstack-reuse=none", "explanation": "-fstack-reuse=[all|named_vars|none] Set stackreuse level for local variables.", "id": 159}, {"flag": "-fstack-reuse=named_vars", "explanation": "-fstack-reuse=[all|named_vars|none] Set stackreuse level for local variables.", "id": 160}, {"flag": "-fstack-reuse=all", "explanation": "-fstack-reuse=[all|named_vars|none] Set stackreuse level for local variables.", "id": 161}, {"flag": "-fstdarg-opt", "explanation": "Optimize amount of stdarg registers saved tostack at start of function.", "id": 162}, {"flag": "-fstrict-aliasing", "explanation": "Assume strict aliasing rules apply.", "id": 163}, {"flag": "-fstrict-enums", "explanation": "Assume that values of enumeration type are alwayswithin the minimum range of that type.", "id": 164}, {"flag": "-fstrict-overflow", "explanation": "Treat signed overflow as undefined.", "id": 165}, {"flag": "-fstrict-volatile-bitfields", "explanation": "Force bitfield accesses to match their type width.", "id": 166}, {"flag": "-fthread-jumps", "explanation": "Perform jump threading optimizations.", "id": 167}, {"flag": "-fno-threadsafe-statics", "explanation": "Do not generate thread-safe code for initializinglocal statics.", "id": 168}, {"flag": "-ftracer", "explanation": "Perform superblock formation via tail duplication.", "id": 169}, {"flag": "-ftrapping-math", "explanation": "Assume floating-point operations can trap.", "id": 170}, {"flag": "-ftrapv", "explanation": "Trap for signed overflow in addition, subtractionand multiplication.", "id": 171}, {"flag": "-ftree-bit-ccp", "explanation": "Enable SSA-BIT-CCP optimization on trees.", "id": 172}, {"flag": "-ftree-builtin-call-dce", "explanation": "Enable conditional dead code elimination forbuiltin calls.", "id": 173}, {"flag": "-ftree-ccp", "explanation": "Enable SSA-CCP optimization on trees.", "id": 174}, {"flag": "-ftree-ch", "explanation": "Enable loop header copying on trees.", "id": 175}, {"flag": "-ftree-coalesce-vars", "explanation": "Enable SSA coalescing of user variables.", "id": 176}, {"flag": "-ftree-copy-prop", "explanation": "Enable copy propagation on trees.", "id": 177}, {"flag": "-ftree-cselim", "explanation": "Transform condition stores into unconditionalones.", "id": 178}, {"flag": "-ftree-dce", "explanation": "Enable SSA dead code elimination optimization ontrees.", "id": 179}, {"flag": "-ftree-dominator-opts", "explanation": "Enable dominator optimizations.", "id": 180}, {"flag": "-ftree-dse", "explanation": "Enable dead store elimination.", "id": 181}, {"flag": "-ftree-forwprop", "explanation": "Enable forward propagation on trees.", "id": 182}, {"flag": "-ftree-fre", "explanation": "Enable Full Redundancy Elimination (FRE) on trees.", "id": 183}, {"flag": "-ftree-loop-distribute-patterns", "explanation": "Enable loop distribution for patternstransformed into a library call.", "id": 184}, {"flag": "-ftree-loop-distribution", "explanation": "Enable loop distribution on trees.", "id": 185}, {"flag": "-ftree-loop-if-convert", "explanation": "Convert conditional jumps in innermost loops tobranchless equivalents.", "id": 186}, {"flag": "-ftree-loop-if-convert-stores", "explanation": "Also if-convert conditional jumps containingmemory writes.", "id": 187}, {"flag": "-ftree-loop-im", "explanation": "Enable loop invariant motion on trees.", "id": 188}, {"flag": "-ftree-loop-ivcanon", "explanation": "Create canonical induction variables in loops.", "id": 189}, {"flag": "-ftree-loop-optimize", "explanation": "Enable loop optimizations on tree level.", "id": 190}, {"flag": "-ftree-loop-vectorize", "explanation": "Enable loop vectorization on trees.", "id": 191}, {"flag": "-ftree-lrs", "explanation": "Perform live range splitting during the SSA->normal pass.", "id": 192}, {"flag": "-ftree-partial-pre", "explanation": "In SSA-PRE optimization on trees, enable partial-partial redundancy elimination.", "id": 193}, {"flag": "-ftree-phiprop", "explanation": "\u4e3a\u6761\u4ef6\u6307\u9488\u5916\u63d0\u5185\u5b58\u8bfb\u53d6\u64cd\u4f5c\u3002", "id": 194}, {"flag": "-ftree-pre", "explanation": "Enable SSA-PRE optimization on trees.", "id": 195}, {"flag": "-ftree-pta", "explanation": "\u5728\u6811\u4e0a\u8fdb\u884c\u51fd\u6570\u5185\u7684\u6307\u5411\u5206\u6790\u3002", "id": 196}, {"flag": "-ftree-reassoc", "explanation": "Enable reassociation on tree level.", "id": 197}, {"flag": "-ftree-scev-cprop", "explanation": "\u4e3a\u6807\u91cf\u6f14\u5316\u4fe1\u606f\u8fdb\u884c\u590d\u5199\u4f20\u9012\u3002", "id": 198}, {"flag": "-ftree-sink", "explanation": "Enable SSA code sinking on trees.", "id": 199}, {"flag": "-ftree-slp-vectorize", "explanation": "Enable basic block vectorization (SLP) on trees.", "id": 200}, {"flag": "-ftree-slsr", "explanation": "Perform straight-line strength reduction.", "id": 201}, {"flag": "-ftree-sra", "explanation": "Perform scalar replacement of aggregates.", "id": 202}, {"flag": "-ftree-switch-conversion", "explanation": "\u8f6c\u6362\u5f00\u5173\u521d\u59cb\u5316", "id": 203}, {"flag": "-ftree-tail-merge", "explanation": "Enable tail merging on trees.", "id": 204}, {"flag": "-ftree-ter", "explanation": "Replace temporary expressions in the SSA->normalpass.", "id": 205}, {"flag": "-ftree-vectorize", "explanation": "Enable vectorization on trees.", "id": 206}, {"flag": "-ftree-vrp", "explanation": "Perform Value Range Propagation on trees.", "id": 207}, {"flag": "-funconstrained-commons", "explanation": "Assume common declarations may be overridden withones with a larger trailing array.", "id": 208}, {"flag": "-funroll-all-loops", "explanation": "Perform loop unrolling for all loops.", "id": 209}, {"flag": "-funroll-loops", "explanation": "Perform loop unrolling when iteration count isknown.", "id": 210}, {"flag": "-funsafe-loop-optimizations", "explanation": "Allow loop optimizations to assume that the loopsbehave in normal way.", "id": 211}, {"flag": "-funsafe-math-optimizations", "explanation": "Allow math optimizations that may violate IEEE orISO standards.", "id": 212}, {"flag": "-funswitch-loops", "explanation": "Perform loop unswitching.", "id": 213}, {"flag": "-funwind-tables", "explanation": "Just generate unwind tables for exceptionhandling.", "id": 214}, {"flag": "-fvar-tracking", "explanation": "Perform variable tracking.", "id": 215}, {"flag": "-fvar-tracking-assignments", "explanation": "Perform variable tracking by annotatingassignments.", "id": 216}, {"flag": "-fvar-tracking-assignments-toggle", "explanation": "Toggle -fvar-tracking-assignments.", "id": 217}, {"flag": "-fvar-tracking-uninit", "explanation": "Perform variable tracking and also tag variablesthat are uninitialized.", "id": 218}, {"flag": "-fvariable-expansion-in-unroller", "explanation": "Apply variable expansion when loops areunrolled.", "id": 219}, {"flag": "-fvect-cost-model=unlimited", "explanation": "Specifies the cost model for vectorization.", "id": 220}, {"flag": "-fvect-cost-model=dynamic", "explanation": "Specifies the cost model for vectorization.", "id": 221}, {"flag": "-fvect-cost-model=cheap", "explanation": "Specifies the cost model for vectorization.", "id": 222}, {"flag": "-fvect-cost-model=very-cheap", "explanation": "Specifies the cost model for vectorization.", "id": 223}, {"flag": "-fvpt", "explanation": "Use expression value profiles in optimizations.", "id": 224}, {"flag": "-fweb", "explanation": "Construct webs and split unrelated uses of singlevariable.", "id": 225}, {"flag": "-fwrapv", "explanation": "Assume signed arithmetic overflow wraps around.", "id": 226}]